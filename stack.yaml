AWSTemplateFormatVersion: 2010-09-09
Description: Lambda and API Gateway
Parameters:
  WebsiteBucketName:
    Default: "wort-frontend-test"
    Description: "The name of the bucket.  A good name is the name of your website. ex: example.com"
    Type: String
    ConstraintDescription: "You must enter a name here."
  LambdaSourceBucket:
    Description: The name of the S3 bucket that contains the source code of your Lambda
      function.
    Type: String
  LambdaJarKey:
    Description: The location and name of your source code .jar file.
    Type: String
    Default: lambda.jar
Resources:
  MyCustomResource:
    DependsOn:
    - S3CopyLambda
    Type: "Custom::LambdaCopier"
    Properties:
      ServiceToken:
        Fn::Join:
        - ''
        - - 'arn:aws:lambda:'
          - Ref: AWS::Region
          - ":"
          - Ref: AWS::AccountId
          - ":function:"
          - Ref: S3CopyLambda
          #- "arn:aws:lambda:"${AWS::Region}:${AWS::AccountId}:function:${S3CopyLambda}
      S3BucketInput:
        #holding build output Bucket
        Ref: LambdaSourceBucket
      S3KeyInput:
        # pointing to zip file from build output that is in S3 bucket
        Ref: LambdaJarKey
      S3BucketDestination:
        Ref: WebsiteBucketName
  S3Bucket:
    Type: "AWS::S3::Bucket"
    Properties:
      AccessControl: PublicRead
      BucketName:
        Ref: WebsiteBucketName
      WebsiteConfiguration:
        IndexDocument: "index.html"
        ErrorDocument: "error.html"
    DeletionPolicy: Delete
  BucketPolicy:
    Type: "AWS::S3::BucketPolicy"
    Properties:
      PolicyDocument:
        Id: "MyPolicy"
        Version: "2012-10-17"
        Statement:
        - Sid: PublicReadForGetBucketObjects
          Effect: Allow
          Principal:
            AWS: "*"
          Action: "s3:GetObject"
          Resource:
            "Fn::Join":
              - ""
              - - "arn:aws:s3:::"
                - Ref: "S3Bucket"
                - "/*"
      Bucket:
        Ref: S3Bucket
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: logs
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:*
            Resource: arn:aws:logs:*:*:*
  Lambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket:
          Ref: LambdaSourceBucket
        S3Key:
          Ref: LambdaJarKey
      Description: Frontend handler
      Handler: wort.core::handler
      MemorySize: 512
      Role:
        Fn::GetAtt:
        - LambdaRole
        - Arn
      Runtime: java8
      Timeout: 15 # seconds
  S3CopyLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: >
          exports.handler = function(event, context) {
              var zlib = require('zlib');
              var AWS  = require('aws-sdk');
              var S3   = new AWS.S3();
              var response = require('cfn-response');
              var buckets = {
                  in: {
                      "Bucket": event.ResourceProperties.S3BucketInput,
                      "Key": event.ResourceProperties.S3KeyInput,
                  },
                  out: {
                      "Bucket": event.ResourceProperties.WebsiteBucketName,
                      "Key":event.ResourceProperties.S3BucketDestination,
                  }
              };
              S3.getObject(buckets.in, function(err, data) {
                  if (err) {
                      console.log("Couldn't get file " + buckets.in.Key);
                      context.fail("Error getting file: " + err);
                      return;
                  }
                  zlib.gunzip(data.Body, function (err, result) {
                      if (err) {
                          console.log(err);
                          response.send(event, context, response.FAILURE, {});
                          return;
                      }
                      const lambda_data = {
                          Body: result,
                          Bucket: buckets.out.Bucket,
                          Key: buckets.out.Key,
                          ContentType: 'content-type'
                      };
                      S3.putObject(lambda_data, function(err, data) {
                          if (err) {
                              console.log("Couldn't write to S3 bucket " + buckets.out.Bucket);
                              context.fail("Error writing file: " + err);
                              response.send(event, context, response.FAILURE, {});
                              return;
                          }
                          console.log("Successfully copied frontend files");
                          response.send(event, context, response.SUCCESS, {});
                          context.succeed();
                      });
                  });
              });
          };
      Description: Frontend handler
      Handler: index.handler
      MemorySize: 512
      Role:
        Fn::GetAtt:
        - LambdaRole
        - Arn
      Runtime: nodejs6.10
      Timeout: 15 # seconds
  LambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      FunctionName:
        Fn::GetAtt:
        - Lambda
        - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
        - ''
        - - 'arn:aws:execute-api:'
          - Ref: AWS::Region
          - ":"
          - Ref: AWS::AccountId
          - ":"
          - Ref: RestApi
          - "/*"
  RestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub ${AWS::StackName}
  AutoSalutationModel:
    Type: AWS::ApiGateway::Model
    Properties:
      ContentType: application/json
      Name: AutoSalutation
      RestApiId:
        Ref: RestApi
      Schema:
        "$schema": http://json-schema.org/draft-04/schema#
        title: AutoSalutation
        type: object
        additionalProperties: false
        properties:
          salutation:
            type: string
        required:
        - salutation
  AutoSalutationResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId:
        Ref: RestApi
      ParentId:
        Fn::GetAtt:
        - RestApi
        - RootResourceId
      PathPart: auto_salutation
  AutoSalutationGet:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId:
        Ref: RestApi
      ResourceId:
        Ref: AutoSalutationResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri:
          Fn::Join:
          - ''
          - - 'arn:aws:apigateway:'
            - Ref: AWS::Region
            - ":lambda:path/2015-03-31/functions/"
            - Fn::GetAtt:
              - Lambda
              - Arn
            - "/invocations"
        IntegrationResponses:
        - ResponseTemplates:
            application/json: "{\"salutation\": \"$input.body\"}"
          StatusCode: 200
        PassthroughBehavior: NEVER
        RequestTemplates:
          application/json: |
            "$input.params('name')"
      RequestParameters:
        method.request.querystring.name: true
      MethodResponses:
      - ResponseModels:
          application/json:
            Ref: AutoSalutationModel
        StatusCode: 200
      - ResponseModels:
          application/json: Empty
        StatusCode: 404
Outputs:
  ApiId:
    Value:
      Ref: RestApi
  WebsiteURL:
    Value:
      Fn::GetAtt:
        - S3Bucket
        - WebsiteURL
    Description: "URL for website hosted on S3"
  S3BucketSecureURL:
    Value:
      Fn::Join:
      - ''
      - - https://
        - Fn::GetAtt:
          - S3Bucket
          - DomainName
    Description: "Name of S3 bucket to hold website content"
